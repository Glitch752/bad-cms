{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport optionsDefaults from './schemas/optionsDefaults';\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType,\n  GetClassNameOptionsType,\n} from './types';\n\nconst isNamespacedStyleName = (styleName: string): boolean => styleName.includes('.');\n\nconst handleError = (\n  message: string,\n  handleMissingStyleName: HandleMissingStyleNameOptionType,\n): null => {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType,\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption\n    || optionsDefaults.handleMissingStyleName;\n\n  if (!moduleName) {\n    return handleError(`Invalid style name: ${styleName}`, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError(`CSS module import does not exist: ${importName}`, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError(`CSS module does not exist: ${moduleName}`, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nconst getClassNameFromMultipleImports = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType,\n): ?string => {\n  const handleMissingStyleName = handleMissingStyleNameOption\n    || optionsDefaults.handleMissingStyleName;\n\n  const importKeysWithMatches = Object.keys(styleModuleImportMap)\n    .map((importKey) => styleModuleImportMap[importKey][styleName] && importKey)\n    .filter((importKey) => importKey);\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error(`Cannot resolve styleName \"${styleName}\" because it is present in multiple imports:`\n      + `\\n\\n\\t${importKeysWithMatches.join('\\n\\t')\n      }\\n\\nYou can resolve this by using a named import, e.g:`\n      + `\\n\\n\\timport foo from \"${importKeysWithMatches[0]}\";`\n      + `\\n\\t<div styleName=\"foo.${styleName}\" />`\n      + '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError(`Could not resolve the styleName '${styleName}'.`, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nexport default (\n  styleNameValue: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  options?: GetClassNameOptionsType,\n): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const {\n    handleMissingStyleName = optionsDefaults.handleMissingStyleName,\n    autoResolveMultipleImports = optionsDefaults.autoResolveMultipleImports,\n  } = options || {};\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => styleName)\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(\n          styleName,\n          styleModuleImportMap,\n          handleMissingStyleName,\n        );\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error(`Cannot use styleName attribute for style name '${styleName\n        }' without importing at least one stylesheet.`);\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        if (!autoResolveMultipleImports) {\n          throw new Error(`Cannot use anonymous style name '${styleName\n          }' with more than one stylesheet import without setting 'autoResolveMultipleImports' to true.`);\n        }\n\n        return getClassNameFromMultipleImports(\n          styleName,\n          styleModuleImportMap,\n          handleMissingStyleName,\n        );\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        return handleError(`Could not resolve the styleName '${styleName}'.`, handleMissingStyleName);\n      }\n\n      return styleModuleMap[styleName];\n    })\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    .filter((className) => className)\n    .join(' ');\n};\n"]}