{"version":3,"sources":["../src/createObjectExpression.js"],"names":["createObjectExpression","types","object","properties","Object","keys","forEach","name","value","newValue","isAnyTypeAnnotation","stringLiteral","booleanLiteral","TypeError","push","objectProperty","objectExpression"],"mappings":";;;;;;;AAEA;;;;;;AASA;AACA;AACA;AACA,MAAMA,sBAAsB,GAAG,CAC7BC,KAD6B,EAE7BC,MAF6B,KAGD;AAC5B,QAAMC,UAAU,GAAG,EAAnB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA6BC,IAAD,IAAU;AACpC,UAAMC,KAAK,GAAGN,MAAM,CAACK,IAAD,CAApB;AAEA,QAAIE,QAAJ;;AAEA,QAAI,CAACR,KAAK,CAACS,mBAAN,CAA0BF,KAA1B,CAAL,EAAuC;AACrC,cAAQ,OAAOA,KAAf;AACE,aAAK,QAAL;AACEC,UAAAA,QAAQ,GAAGR,KAAK,CAACU,aAAN,CAAoBH,KAApB,CAAX;AACA;;AACF,aAAK,QAAL;AACEC,UAAAA,QAAQ,GAAGT,sBAAsB,CAACC,KAAD,EAAQO,KAAR,CAAjC;AACA;;AACF,aAAK,SAAL;AACEC,UAAAA,QAAQ,GAAGR,KAAK,CAACW,cAAN,CAAqBJ,KAArB,CAAX;AACA;;AACF,aAAK,WAAL;AACE;;AACF;AACE,gBAAM,IAAIK,SAAJ,CAAe,oBAAmB,OAAOL,KAAM,EAA/C,CAAN;AAbJ;AAeD;;AAEDL,IAAAA,UAAU,CAACW,IAAX,CACEb,KAAK,CAACc,cAAN,CACEd,KAAK,CAACU,aAAN,CAAoBJ,IAApB,CADF,EAEEE,QAFF,CADF;AAMD,GA7BD;AA+BA,SAAOR,KAAK,CAACe,gBAAN,CAAuBb,UAAvB,CAAP;AACD,CAtCD;;eAwCeH,sB","sourcesContent":["// @flow\n\nimport BabelTypes, {\n  ObjectExpression,\n} from '@babel/types';\n\ntype InputObjectType = {\n  [key: string]: *,\n  ...\n};\n\n/**\n * Creates an AST representation of an InputObjectType shape object.\n */\nconst createObjectExpression = (\n  types: typeof BabelTypes,\n  object: InputObjectType,\n): typeof ObjectExpression => {\n  const properties = [];\n\n  Object.keys(object).forEach((name) => {\n    const value = object[name];\n\n    let newValue;\n\n    if (!types.isAnyTypeAnnotation(value)) {\n      switch (typeof value) {\n        case 'string':\n          newValue = types.stringLiteral(value);\n          break;\n        case 'object':\n          newValue = createObjectExpression(types, value);\n          break;\n        case 'boolean':\n          newValue = types.booleanLiteral(value);\n          break;\n        case 'undefined':\n          return;\n        default:\n          throw new TypeError(`Unexpected type: ${typeof value}`);\n      }\n    }\n\n    properties.push(\n      types.objectProperty(\n        types.stringLiteral(name),\n        newValue,\n      ),\n    );\n  });\n\n  return types.objectExpression(properties);\n};\n\nexport default createObjectExpression;\n"],"file":"createObjectExpression.js"}