{"version":3,"sources":["../src/getClassName.js"],"names":["isNamespacedStyleName","styleName","includes","handleError","message","handleMissingStyleName","Error","console","warn","getClassNameForNamespacedStyleName","styleModuleImportMap","handleMissingStyleNameOption","styleNameParts","split","importName","moduleName","optionsDefaults","getClassNameFromMultipleImports","importKeysWithMatches","Object","keys","map","importKey","filter","length","join","styleNameValue","options","styleModuleImportMapKeys","autoResolveMultipleImports","styleModuleMap","className"],"mappings":"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","sourcesContent":["// @flow\n\nimport optionsDefaults from './schemas/optionsDefaults';\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType,\n  GetClassNameOptionsType,\n} from './types';\n\nconst isNamespacedStyleName = (styleName: string): boolean => styleName.includes('.');\n\nconst handleError = (\n  message: string,\n  handleMissingStyleName: HandleMissingStyleNameOptionType,\n): null => {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType,\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption\n    || optionsDefaults.handleMissingStyleName;\n\n  if (!moduleName) {\n    return handleError(`Invalid style name: ${styleName}`, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError(`CSS module import does not exist: ${importName}`, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError(`CSS module does not exist: ${moduleName}`, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nconst getClassNameFromMultipleImports = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType,\n): ?string => {\n  const handleMissingStyleName = handleMissingStyleNameOption\n    || optionsDefaults.handleMissingStyleName;\n\n  const importKeysWithMatches = Object.keys(styleModuleImportMap)\n    .map((importKey) => styleModuleImportMap[importKey][styleName] && importKey)\n    .filter((importKey) => importKey);\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error(`Cannot resolve styleName \"${styleName}\" because it is present in multiple imports:`\n      + `\\n\\n\\t${importKeysWithMatches.join('\\n\\t')\n      }\\n\\nYou can resolve this by using a named import, e.g:`\n      + `\\n\\n\\timport foo from \"${importKeysWithMatches[0]}\";`\n      + `\\n\\t<div styleName=\"foo.${styleName}\" />`\n      + '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError(`Could not resolve the styleName '${styleName}'.`, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nexport default (\n  styleNameValue: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  options?: GetClassNameOptionsType,\n): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const {\n    handleMissingStyleName = optionsDefaults.handleMissingStyleName,\n    autoResolveMultipleImports = optionsDefaults.autoResolveMultipleImports,\n  } = options || {};\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => styleName)\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(\n          styleName,\n          styleModuleImportMap,\n          handleMissingStyleName,\n        );\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error(`Cannot use styleName attribute for style name '${styleName\n        }' without importing at least one stylesheet.`);\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        if (!autoResolveMultipleImports) {\n          throw new Error(`Cannot use anonymous style name '${styleName\n          }' with more than one stylesheet import without setting 'autoResolveMultipleImports' to true.`);\n        }\n\n        return getClassNameFromMultipleImports(\n          styleName,\n          styleModuleImportMap,\n          handleMissingStyleName,\n        );\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        return handleError(`Could not resolve the styleName '${styleName}'.`, handleMissingStyleName);\n      }\n\n      return styleModuleMap[styleName];\n    })\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    .filter((className) => className)\n    .join(' ');\n};\n"],"file":"getClassName.js"}