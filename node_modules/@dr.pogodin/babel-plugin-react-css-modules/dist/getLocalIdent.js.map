{"version":3,"sources":["../src/getLocalIdent.js"],"names":["getPath","mockCompilation","hooks","assetPath","tap","_","fn","mockCompiler","compilation","TemplatedPathPlugin","apply","filenameReservedRegex","reControlChars","normalizePath","file","path","sep","replace","regexSingleEscape","regexExcessiveSpaces","escape","string","output","counter","length","character","charAt","value","test","codePoint","charCodeAt","toString","toUpperCase","firstChar","slice","aa","bb","cc","gobbleHex","lower","toLowerCase","hex","spaceTerminated","index","undefined","code","valid","Number","parseInt","isSurrogate","String","fromCodePoint","unescape","includes","returnValue","gobbled","escapeLocalIdent","localident","getLocalIdent","loaderContext","localIdentName","localName","options","context","hashSalt","resourcePath","relativeResourcePath","relative","content","hashFunction","hashDigest","hashDigestLength","matches","match","hashName","localIdentHash","tier","hash","update","tierSalt","Buffer","allocUnsafe","writeUInt32LE","from","digest","ext","extname","base","basename","name","data","chunk","contentHash","filename","ident","dirname","directory","folder","regExp","entries","forEach","idx","matched","RegExp"],"mappings":"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","sourcesContent":["/**\n * getLocalIdent() function taken from css-loader@5.2.4\n */\n\nimport path from 'path';\nimport TemplatedPathPlugin from 'webpack/lib/TemplatedPathPlugin';\nimport createHash from 'webpack/lib/util/createHash';\n\n/**\n * Interpolates path template according to data.\n *\n * NOTE: The current \"css-loader\" relies on Webpack compilation mechanics,\n * build around tappable plugins. Here we expose the core logic of Webpack's\n * TemplatePathPlugin to make it usable without hooks, and Webpack's compilation\n * object. This has pros and cons: on one hand it allows to easily keep our\n * plugin functional in a way it worked before, on the negative side it now\n * may be sensitive to the exact Webpack version, in addition to css-loader.\n * Overall, it seems a reasonable solution for now.\n *\n * @param {string} path\n * @param {object} data\n * @returns {string}\n */\nlet getPath;\n{\n  // NOTE: This codeblock just exploits the current implementation of underlying\n  // TemplatedPathPlugin, see:\n  // https://github.com/webpack/webpack/blob/7102df3bb52a33529ff5db4fdf34484d2a359a49/lib/TemplatedPathPlugin.js#L308-L319\n  // It just applies the plugin to mock compiler & compilation to get access to\n  // the core logic function, which is copied to getPath() to be reused directly\n  // when needed.\n  const mockCompilation = {\n    hooks: {\n      assetPath: {\n        tap: (_, fn) => {\n          getPath = fn;\n        },\n      },\n    },\n    tap: (_, fn) => {\n      fn(mockCompilation);\n    },\n  };\n  const mockCompiler = {\n    hooks: { compilation: mockCompilation },\n  };\n  new TemplatedPathPlugin().apply(mockCompiler);\n}\n\nconst filenameReservedRegex = /[\"*/:<>?\\\\|]/gu;\n// eslint-disable-next-line no-control-regex\nconst reControlChars = /[\\u0000-\\u001F\\u0080-\\u009F]/gu;\n\nconst normalizePath = (file) => (path.sep === '\\\\' ? file.replace(/\\\\/gu, '/') : file);\n\nconst regexSingleEscape = /[ -,./:-@[\\]^`{-~]/u;\nconst regexExcessiveSpaces = /(^|\\\\+)?(\\\\[\\dA-F]{1,6}) (?![\\d A-Fa-f])/gu;\n\nconst escape = (string) => {\n  let output = '';\n  let counter = 0;\n\n  while (counter < string.length) {\n    const character = string.charAt(counter++);\n\n    let value;\n\n    // eslint-disable-next-line no-control-regex\n    if (/[\\t\\n\\u000B\\f\\r]/u.test(character)) {\n      const codePoint = character.charCodeAt();\n\n      value = `\\\\${codePoint.toString(16).toUpperCase()} `;\n    } else if (character === '\\\\' || regexSingleEscape.test(character)) {\n      value = `\\\\${character}`;\n    } else {\n      value = character;\n    }\n\n    output += value;\n  }\n\n  const firstChar = string.charAt(0);\n\n  if (/^-[\\d-]/u.test(output)) {\n    output = `\\\\-${output.slice(1)}`;\n  } else if (/\\d/u.test(firstChar)) {\n    output = `\\\\3${firstChar} ${output.slice(1)}`;\n  }\n\n  // Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n  // since they’re redundant. Note that this is only possible if the escape\n  // sequence isn’t preceded by an odd number of backslashes.\n  output = output.replace(regexExcessiveSpaces, (aa, bb, cc) => {\n    if (bb && bb.length % 2) {\n      // It’s not safe to remove the space, so don’t.\n      return aa;\n    }\n\n    // Strip the space.\n    return (bb || '') + cc;\n  });\n\n  return output;\n};\n\nconst gobbleHex = (string) => {\n  const lower = string.toLowerCase();\n  let hex = '';\n  let spaceTerminated = false;\n\n  for (let index = 0; index < 6 && lower[index] !== undefined; index++) {\n    const code = lower.charCodeAt(index);\n\n    // check to see if we are dealing with a valid hex char [a-f|0-9]\n    const valid = (code >= 97 && code <= 102) || (code >= 48 && code <= 57);\n\n    // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n    spaceTerminated = code === 32;\n\n    if (!valid) {\n      break;\n    }\n\n    hex += lower[index];\n  }\n\n  if (hex.length === 0) {\n    return undefined;\n  }\n\n  const codePoint = Number.parseInt(hex, 16);\n\n  const isSurrogate = codePoint >= 0xD8_00 && codePoint <= 0xDF_FF;\n\n  // Add special case for\n  // \"If this number is zero, or is for a surrogate,\n  // or is greater than the maximum allowed code point\"\n  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n  if (isSurrogate || codePoint === 0x00_00 || codePoint > 0x10_FF_FF) {\n    return ['\\uFFFD', hex.length + (spaceTerminated ? 1 : 0)];\n  }\n\n  return [\n    String.fromCodePoint(codePoint),\n    hex.length + (spaceTerminated ? 1 : 0),\n  ];\n};\n\nexport const unescape = (string) => {\n  if (!string.includes('\\\\')) {\n    return string;\n  }\n\n  let returnValue = '';\n\n  for (let index = 0; index < string.length; index++) {\n    if (string[index] === '\\\\') {\n      const gobbled = gobbleHex(string.slice(index + 1, index + 7));\n\n      if (gobbled !== undefined) {\n        returnValue += gobbled[0];\n        index += gobbled[1];\n\n      // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n      } else if (string[index + 1] === '\\\\') {\n        returnValue += '\\\\';\n        index += 1;\n\n      // if \\\\ is at the end of the string retain it\n      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n      } else if (string.length === index + 1) {\n        returnValue += string[index];\n      }\n    } else returnValue += string[index];\n  }\n\n  return returnValue;\n};\n\nconst escapeLocalIdent = (localident) => escape(\n  localident\n\n  // For `[hash]` placeholder\n    .replace(/^((-?\\d)|--)/u, '_$1')\n    .replace(filenameReservedRegex, '-')\n    .replace(reControlChars, '-')\n    .replace(/\\./gu, '-'),\n);\n\nexport default function getLocalIdent(\n  loaderContext,\n  localIdentName,\n  localName,\n  options,\n) {\n  const { context, hashSalt } = options;\n  const { resourcePath } = loaderContext;\n  const relativeResourcePath = normalizePath(\n    path.relative(context, resourcePath),\n  );\n\n  const content = `${relativeResourcePath}\\u0000${localName}`;\n\n  let { hashFunction, hashDigest, hashDigestLength } = options;\n  const matches = localIdentName.match(\n    /\\[(?:([^:\\]]+):)?(?:(hash|contenthash|fullhash))(?::([a-z]+\\d*))?(?::(\\d+))?\\]/iu,\n  );\n\n  if (matches) {\n    const hashName = matches[2] || hashFunction;\n\n    hashFunction = matches[1] || hashFunction;\n    hashDigest = matches[3] || hashDigest;\n    hashDigestLength = matches[4] || hashDigestLength;\n\n    // `hash` and `contenthash` are same in `loader-utils` context\n    // let's keep `hash` for backward compatibility\n\n    // eslint-disable-next-line no-param-reassign\n    localIdentName = localIdentName.replace(\n      /\\[(?:([^:\\]]+):)?(?:hash|contenthash|fullhash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/giu,\n      () => (hashName === 'fullhash' ? '[fullhash]' : '[contenthash]'),\n    );\n  }\n\n  let localIdentHash = '';\n\n  for (let tier = 0; localIdentHash.length < hashDigestLength; tier++) {\n    const hash = createHash(hashFunction);\n\n    if (hashSalt) {\n      hash.update(hashSalt);\n    }\n\n    const tierSalt = Buffer.allocUnsafe(4);\n\n    tierSalt.writeUInt32LE(tier);\n\n    hash.update(tierSalt);\n\n    // TODO: bug in webpack with unicode characters with strings\n    hash.update(Buffer.from(content, 'utf8'));\n\n    localIdentHash = (localIdentHash + hash.digest(hashDigest))\n      // Remove all leading digits\n      .replace(/^\\d+/u, '')\n      // Replace all slashes with underscores (same as in base64url)\n      .replace(/\\//gu, '_')\n      // Remove everything that is not an alphanumeric or underscore\n      .replace(/\\W+/gu, '')\n      .slice(0, hashDigestLength);\n  }\n\n  // TODO need improve on webpack side, we should allow to pass\n  // hash/contentHash without chunk property, also `data` for `getPath` should\n  // be looks good without chunk property\n  const ext = path.extname(resourcePath);\n  const base = path.basename(resourcePath);\n  const name = base.slice(0, base.length - ext.length);\n  const data = {\n    chunk: {\n      contentHash: localIdentHash,\n      hash: localIdentHash,\n      name,\n    },\n    contentHash: localIdentHash,\n    filename: path.relative(context, resourcePath),\n  };\n\n  let ident = getPath(localIdentName, data).replace(/\\[local\\]/giu, localName);\n\n  if (/\\[folder\\]/giu.test(ident)) {\n    const dirname = path.dirname(resourcePath);\n    let directory = normalizePath(\n      path.relative(context, `${dirname + path.sep}_`),\n    );\n\n    directory = directory.slice();\n\n    let folder = '';\n\n    if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n\n    ident = ident.replace(/\\[folder\\]/giu, () => folder);\n  }\n\n  if (options.regExp) {\n    const match = resourcePath.match(options.regExp);\n\n    if (match) {\n      match.entries().forEach(([idx, matched]) => {\n        ident = ident.replace(new RegExp(`\\\\[${idx}\\\\]`, 'igu'), matched);\n      });\n    }\n  }\n\n  return escapeLocalIdent(ident);\n}\n"],"file":"getLocalIdent.js"}