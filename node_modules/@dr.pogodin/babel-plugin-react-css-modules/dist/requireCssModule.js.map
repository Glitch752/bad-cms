{"version":3,"sources":["../src/requireCssModule.js"],"names":["getFiletypeOptions","cssSourceFilePath","filetypes","extension","slice","lastIndexOf","filetype","getSyntax","filetypeOptions","syntax","require","getExtraPlugins","plugins","map","plugin","Array","isArray","pluginName","pluginOptions","getTokens","extraPluginsRunner","runner","options","from","res","process","warnings","forEach","message","console","warn","text","root","tokens","generateScopedName","clazz","resourcePath","optionsDefaults","context","cwd","hashDigest","hashDigestLength","hashFunction","hashSalt","regExp","extraPlugins","length","fetch","to","fromDirectoryPath","toPath","Values","LocalByDefault","ExtractImports","Parser"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  readFileSync,\n} from 'fs';\nimport {\n  dirname,\n  resolve,\n} from 'path';\nimport Parser from '@dr.pogodin/postcss-modules-parser';\nimport postcss from 'postcss';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport newScopePlugin from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport getLocalIdent, {\n  unescape,\n} from './getLocalIdent';\nimport optionsDefaults from './schemas/optionsDefaults';\nimport type {\n  GenerateScopedNameConfigurationType,\n  StyleModuleMapType,\n} from './types';\n\ntype PluginType = string | $ReadOnlyArray<[string, mixed]>;\n\n/* eslint-enable flowtype/no-mixed */\n\ntype FiletypeOptionsType = {|\n  +syntax: string,\n  +plugins?: $ReadOnlyArray<PluginType>,\n|};\n\ntype FiletypesConfigurationType = {\n  [key: string]: FiletypeOptionsType,\n  ...\n};\n\n/* eslint-disable flowtype/no-weak-types */\ntype SyntaxType = Function | Object;\n\n/* eslint-enable flowtype/no-weak-types */\n\ntype OptionsType = {|\n  filetypes: FiletypesConfigurationType,\n  generateScopedName?: GenerateScopedNameConfigurationType,\n  context?: string,\n|};\n\nconst getFiletypeOptions = (\n  cssSourceFilePath: string,\n  filetypes: FiletypesConfigurationType,\n): ?FiletypeOptionsType => {\n  const extension = cssSourceFilePath.slice(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n\n  return filetype;\n};\n\nconst getSyntax = (filetypeOptions: FiletypeOptionsType): ?(SyntaxType) => {\n  if (!filetypeOptions || !filetypeOptions.syntax) {\n    return null;\n  }\n\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  return require(filetypeOptions.syntax);\n};\n\nconst getExtraPlugins = (filetypeOptions: ?FiletypeOptionsType): $ReadOnlyArray<*> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map((plugin) => {\n    if (Array.isArray(plugin)) {\n      const [pluginName, pluginOptions] = plugin;\n\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      return require(pluginName)(pluginOptions);\n    }\n\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    return require(plugin);\n  });\n};\n\nconst getTokens = (\n  extraPluginsRunner,\n  runner,\n  cssSourceFilePath: string,\n  filetypeOptions: ?FiletypeOptionsType,\n): StyleModuleMapType => {\n  const options: Object = {\n    from: cssSourceFilePath,\n  };\n\n  if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  let res = readFileSync(cssSourceFilePath, 'utf-8');\n\n  if (extraPluginsRunner) {\n    res = extraPluginsRunner.process(res, options);\n  }\n\n  res = runner.process(res, options);\n\n  res.warnings().forEach((message) => {\n    // eslint-disable-next-line no-console\n    console.warn(message.text);\n  });\n\n  return res.root.tokens;\n};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n  let generateScopedName;\n\n  if (options.generateScopedName && typeof options.generateScopedName === 'function') {\n    generateScopedName = options.generateScopedName;\n  } else {\n    generateScopedName = (clazz, resourcePath) => getLocalIdent(\n      // TODO: The loader context used by \"css-loader\" may has additional\n      // stuff inside this argument (loader context), allowing for some edge\n      // cases (though, presumably not with a typical configurations)\n      // we don't support (yet?).\n      { resourcePath },\n\n      options.generateScopedName || optionsDefaults.generateScopedName,\n      unescape(clazz),\n      {\n        context: options.context || process.cwd(),\n\n        // TODO: These options should match their counterparts in Webpack\n        // configuration:\n        //  - https://webpack.js.org/configuration/output/#outputhashdigest\n        //  - https://webpack.js.org/configuration/output/#outputhashdigestlength\n        //  - https://webpack.js.org/configuration/output/#outputhashfunction\n        //  - https://webpack.js.org/configuration/output/#outputhashsalt\n        // and they should be exposed as babel-plugin-react-css-modules\n        // options. However, for now they are just hardcoded equal to\n        // the Webpack's default settings.\n        hashDigest: 'hex',\n        hashDigestLength: 20,\n        hashFunction: 'md4',\n        hashSalt: '',\n\n        // TODO: This one allows for some path modifications during\n        // the transform. Probably, not a Webpack param.\n        regExp: '',\n      },\n    );\n  }\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n  const extraPluginsRunner = extraPlugins.length && postcss(extraPlugins);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n\n    return getTokens(extraPluginsRunner, runner, toPath, filetypeOptions);\n  };\n\n  const plugins = [\n    Values,\n    LocalByDefault,\n    ExtractImports,\n    newScopePlugin({\n      generateScopedName,\n    }),\n    new Parser({\n      fetch,\n    }),\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(\n    extraPluginsRunner,\n    runner,\n    cssSourceFilePath,\n    filetypeOptions,\n  );\n};\n"],"file":"requireCssModule.js"}