{"version":3,"sources":["../src/utils.js"],"names":["normalizePath","file","path","sep","replace","filenameReservedRegex","reControlChars","escapeLocalident","localident","isIdentifier","getPackageInfo","folder","res","cache","pp","resolve","fs","existsSync","name","require","root","getLocalIdent","resourcePath","localIdentName","localName","options","packageInfo","dirname","request","relative","content","context","generateScopedNameFactory","assetPath"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;AACA;;;;AATA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAIC,IAAD,IAAWC,cAAKC,GAAL,KAAa,IAAb,GAAoBF,IAAI,CAACG,OAAL,CAAa,MAAb,EAAqB,GAArB,CAApB,GAAgDH,IAAjF;;AAEA,MAAMI,qBAAqB,GAAG,gBAA9B,C,CAEA;;AACA,MAAMC,cAAc,GAAG,gCAAvB;;AAEA,MAAMC,gBAAgB,GAAIC,UAAD,IAAgB,qBACvCA,UAAU,CACV;AADU,CAEPJ,OAFH,CAEW,eAFX,EAE4B,KAF5B,EAGGA,OAHH,CAGWC,qBAHX,EAGkC,GAHlC,EAIGD,OAJH,CAIWE,cAJX,EAI2B,GAJ3B,EAKGF,OALH,CAKW,MALX,EAKmB,GALnB,CADuC,EAOvC;AAAEK,EAAAA,YAAY,EAAE;AAAhB,CAPuC,CAAzC;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAIC,MAAD,IAAY;AACjC,MAAIC,GAAG,GAAGF,cAAc,CAACG,KAAf,CAAqBF,MAArB,CAAV;;AACA,MAAI,CAACC,GAAL,EAAU;AACR,UAAME,EAAE,GAAGZ,cAAKa,OAAL,CAAaJ,MAAb,EAAqB,cAArB,CAAX;AACA;;;AACAC,IAAAA,GAAG,GAAGI,YAAGC,UAAH,CAAcH,EAAd,IAAoB;AACxBI,MAAAA,IAAI,EAAEC,OAAO,CAACL,EAAD,CAAP,CAAYI,IADM;AAExBE,MAAAA,IAAI,EAAET;AAFkB,KAApB,GAGFD,cAAc,CAACR,cAAKa,OAAL,CAAaJ,MAAb,EAAqB,IAArB,CAAD,CAHlB;AAIA;;AACAD,IAAAA,cAAc,CAACG,KAAf,CAAqBF,MAArB,IAA+BC,GAA/B;AACD;;AAED,SAAOA,GAAP;AACD,CAdD;;AAgBAF,cAAc,CAACG,KAAf,GAAuB,EAAvB;;AAEA,MAAMQ,aAAa,GAAG,CACpB;AAAEC,EAAAA;AAAF,CADoB,EAEpBC,cAFoB,EAGpBC,SAHoB,EAIpBC,OAAO,GAAG,EAJU,KAKjB;AACH,QAAMC,WAAW,GAAGhB,cAAc,CAACR,cAAKyB,OAAL,CAAaL,YAAb,CAAD,CAAlC;AACA,QAAMM,OAAO,GAAG5B,aAAa,CAACE,cAAK2B,QAAL,CAAcH,WAAW,CAACN,IAA1B,EAAgCE,YAAhC,CAAD,CAA7B;AAEA,SAAO,kCAAgB;AACrBA,IAAAA;AADqB,GAAhB,EAEJC,cAFI,EAEY,EACjB,GAAGE,OADc;AAEjBK,IAAAA,OAAO,EAAG,GAAEJ,WAAW,CAACR,IAAZ,GAAmBU,OAAQ,SAAQJ,SAAU,EAFxC;AAGjBO,IAAAA,OAAO,EAAEL,WAAW,CAACN;AAHJ,GAFZ,EAMJhB,OANI,CAMI,gBANJ,EAMsBsB,WAAW,CAACR,IANlC,EAOJd,OAPI,CAOI,cAPJ,EAOoBoB,SAPpB,EAQJpB,OARI,CAQI,SARJ,EAQe,GARf,CAAP;AASD,CAlBD;;;;AAoBA,MAAM4B,yBAAyB,GAAIT,cAAD,IAAoB,CAACC,SAAD,EAAYS,SAAZ,KAA0B1B,gBAAgB,CAC9Fc,aAAa,CACX;AAAEC,EAAAA,YAAY,EAAEW;AAAhB,CADW,EAEXV,cAFW,EAGXC,SAHW,EAIX,EAJW,CADiF,CAAhG","sourcesContent":["// This module provides a stable implementation of getLocalIdent(),\n// and generateScopedName() functions, which may be used to override\n// default classname generation algorithms of `css-loader` and this\n// plugin, to be independent of internal `css-loader` changes that\n// from time-to-time alter the output classnames without solid reasons.\n\nimport fs from 'fs';\nimport path from 'path';\nimport cssesc from 'cssesc';\nimport {\n  interpolateName,\n} from 'loader-utils';\n\n/**\n * Normalizes file path to OS-independent format (adopted from css-loader).\n *\n * @ignore\n * @param {string} file\n * @returns {string}\n */\nconst normalizePath = (file) => (path.sep === '\\\\' ? file.replace(/\\\\/gu, '/') : file);\n\nconst filenameReservedRegex = /[\"*/:<>?\\\\|]/gu;\n\n// eslint-disable-next-line no-control-regex\nconst reControlChars = /[\\u0000-\\u001F\\u0080-\\u009F]/gu;\n\nconst escapeLocalident = (localident) => cssesc(\n  localident\n  // For `[hash]` placeholder\n    .replace(/^((-?\\d)|--)/u, '_$1')\n    .replace(filenameReservedRegex, '-')\n    .replace(reControlChars, '-')\n    .replace(/\\./gu, '-'),\n  { isIdentifier: true },\n);\n\n/**\n * Returns the name of package containing the folder; i.e. it recursively looks\n * up from the folder for the closest package.json file, and returns the name in\n * that file. It also caches the results from previously fisited folders.\n *\n * @ignore\n * @param {string} folder\n * @returns {string}\n */\nconst getPackageInfo = (folder) => {\n  let res = getPackageInfo.cache[folder];\n  if (!res) {\n    const pp = path.resolve(folder, 'package.json');\n    /* eslint-disable global-require, import/no-dynamic-require */\n    res = fs.existsSync(pp) ? {\n      name: require(pp).name,\n      root: folder,\n    } : getPackageInfo(path.resolve(folder, '..'));\n    /* eslint-enable global-require, import/no-dynamic-require */\n    getPackageInfo.cache[folder] = res;\n  }\n\n  return res;\n};\n\ngetPackageInfo.cache = {};\n\nconst getLocalIdent = (\n  { resourcePath },\n  localIdentName,\n  localName,\n  options = {},\n) => {\n  const packageInfo = getPackageInfo(path.dirname(resourcePath));\n  const request = normalizePath(path.relative(packageInfo.root, resourcePath));\n\n  return interpolateName({\n    resourcePath,\n  }, localIdentName, {\n    ...options,\n    content: `${packageInfo.name + request}\\u0000${localName}`,\n    context: packageInfo.root,\n  }).replace(/\\[package\\]/giu, packageInfo.name)\n    .replace(/\\[local\\]/giu, localName)\n    .replace(/[@+/]/gu, '-');\n};\n\nconst generateScopedNameFactory = (localIdentName) => (localName, assetPath) => escapeLocalident(\n  getLocalIdent(\n    { resourcePath: assetPath },\n    localIdentName,\n    localName,\n    {},\n  ),\n);\n\nexport {\n  generateScopedNameFactory,\n  getLocalIdent,\n};\n"],"file":"utils.js"}