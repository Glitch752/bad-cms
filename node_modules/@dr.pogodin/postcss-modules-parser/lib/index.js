"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _icssUtils = require("icss-utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var importRegexp = /^:import\((.+)\)$/;
var exportRegexp = /^:export$/;
/**
 * @param  {object}  promise
 * @return {boolean}
 */

function isPromise(promise) {
  return _typeof(promise) === 'object' && typeof promise.then === 'function';
}
/**
 * @param  {object} css
 * @param  {object} translations
 */


function proceed(css, translations) {
  var exportTokens = {};
  (0, _icssUtils.replaceSymbols)(css, translations);
  css.walkRules(exportRegexp, function (rule) {
    rule.walkDecls(function (decl) {
      Object.entries(translations).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        decl.value = decl.value.replace(key, value);
      });
      exportTokens[decl.prop] = decl.value;
    });
    rule.remove();
  });
  css.tokens = exportTokens;
}
/**
 * @param  {function} options.fetch
 * @return {function}
 */


'parser';

function parser() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      fetch = _ref3.fetch;

  return {
    postcssPlugin: 'parser',
    Once: function Once(css) {
      // https://github.com/postcss/postcss/blob/master/docs/api.md#inputfile
      var file = css.source.input.file;
      var translations = {};
      var promises = [];
      var iteration = 0;
      css.walkRules(importRegexp, function (rule) {
        var dependency = RegExp.$1.replace(/^["']|["']$/g, '');
        var result = fetch(dependency, file, iteration++);

        if (isPromise(result)) {
          result.then(function (exports) {
            rule.walkDecls(function (decl) {
              return translations[decl.prop] = exports[decl.value];
            });
            rule.remove();
          });
          promises.push(result);
        } else {
          rule.walkDecls(function (decl) {
            return translations[decl.prop] = result[decl.value];
          });
          rule.remove();
        }
      });

      if (promises.length === 0) {
        return void proceed(css, translations);
      }

      return Promise.all(promises).then(function () {
        return proceed(css, translations);
      });
    }
  };
}

parser.postcss = true;
var _default = parser;
exports["default"] = _default;