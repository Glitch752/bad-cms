import { ActionMeta, ActionObject, EventObject, State, StateConfig } from 'xstate';
export declare type MaybeLazy<T> = T | (() => T);
export declare type NoInfer<T> = [T][T extends any ? 0 : any];
export declare type Prop<T, K> = K extends keyof T ? T[K] : never;
export declare enum ReactEffectType {
    Effect = 1,
    LayoutEffect = 2
}
export interface ReactActionFunction<TContext, TEvent extends EventObject> {
    (context: TContext, event: TEvent, meta: ActionMeta<TContext, TEvent>): () => void;
    __effect: ReactEffectType;
}
export interface ReactActionObject<TContext, TEvent extends EventObject> extends ActionObject<TContext, TEvent> {
    exec: ReactActionFunction<TContext, TEvent>;
}
export interface UseMachineOptions<TContext, TEvent extends EventObject> {
    /**
     * If provided, will be merged with machine's `context`.
     */
    context?: Partial<TContext>;
    /**
     * The state to rehydrate the machine to. The machine will
     * start at this state instead of its `initialState`.
     */
    state?: StateConfig<TContext, TEvent>;
}
export declare type ActionStateTuple<TContext, TEvent extends EventObject> = [
    ReactActionObject<TContext, TEvent>,
    State<TContext, TEvent>
];
//# sourceMappingURL=types.d.ts.map